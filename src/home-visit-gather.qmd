# Gather

## About

This page gathers KoBoToolbox files from the home visit questionnaires.

## Setup

Load helper functions and required package dependencies.

```{r setup}
fl <-
  list.files(
    file.path(here::here(), "R"),
    "^load|^kobo_|^file_|^screen_|^ecbq_|^health_|^databrary|^home|^make|^export|^post_visit|CONSTANTS",
    full.names = TRUE
  )
purrr::walk(fl, source)

suppressPackageStartupMessages(library(tidyverse))
```

Data files for each of the language by age-group conditions are stored on KoBoToolbox (KBT).

The data files on KBT are stored in `kb_df`, a data frame that is generated as one of the workflow targets.

```{r home-visit-list-forms}
targets::tar_load(kb_df, store=file.path(here::here(), "_targets"))
kb_df
```

## Download data {-}

List data forms specific to the home visit by filtering the files with names that contain "Home".

```{r filter-home-visits}
kb_home_df <- kobo_list_data_filtered(kb_df, "Home")
kb_home_df
```

There are *n*= {r dim(kb_home_df)[1]} separate data files.

## Retrieve and save files {-}

We save the answer files in `data/xlsx/home_visit/raw/ans` and the question files in `data/xlsx/home_visit/raw/qs`.
To extract the answer data only, we would set `save_form = FALSE`.

::: {.callout-note}
This process seems inefficient.
Most of the time most of the files do not change.
But, it ensures that if there are any upstream changes to the raw KoBoToolbox data forms that those get propagated to our local copies.
:::

```{r retrieve-home-xlsx-from-kobo}
kobo_retrieve_save_many_xlsx(
  kb_home_df,
  save_dir = file.path(here::here(), "data/xlsx/home_visit/raw"),
  save_form = TRUE
)
```

### Normalize file names {-}

Some of the form names are inconsistent, so we normalize them to fit the following pattern:

`<form_id>_PLAY_HomeQuestionnaires_<age_group>_<lang_group>.xlsx`

```{r rename-home-visit}
rename_home_xlsx(
  fl = list.files(
    file.path(here::here(), "data/xlsx/home_visit/raw/ans"),
    "\\.xlsx$",
    full.names = TRUE
  ),
  out_dir = file.path(here::here(), "data/xlsx/home_visit/std_name")
)
```

### Save renamed xlsx as csv {-}

We save the (answer) CSVs in `data/csv/home_visit/raw`.

```{r load-xlsx-save-csvs}
file_load_xlsx_save_many_csv(
  in_dir = file.path(here::here(), "data/xlsx/home_visit/std_name"),
  out_dir = file.path(here::here(), "data/csv/home_visit/raw"),
  filter_str = ".*"
)
```

## Split MB-CDI from non {-}

Next we import a CSV for a given form year, age group, and language group, and create two new CSV files: one with the MB-CDI data and one with all of the other survey questions.

By default, the document presumes that we want to convert **all** of the CSV files

Extract the 'non-mbcdi' questions first and add 'non_mbcdi' to the filename.

```{r split-non-mbcdi}
file_split_non_mbcdi_csvs(
  fl = list.files(
    file.path(here::here(), "data/csv/home_visit/raw"),
    "\\.csv$",
    full.names = TRUE
  ),
  out_dir = file.path(here::here(), "data/csv/home_visit/non_mbcdi/raw")
)
```

Creating a separate MBCDI CSV relies on a very similar function `file_split_mbcdi_csvs`.

```{r split-mbcdi}
file_split_mbcdi_csvs(
  fl = list.files(
    file.path(here::here(), "data/csv/home_visit/raw"),
    "\\.csv$",
    full.names = TRUE
  ),
  out_dir = file.path(here::here(), "data/csv/home_visit/mbcdi")
)
```
