{
  "hash": "20172bf503041a48f69b04f200d9e13c",
  "result": {
    "engine": "knitr",
    "markdown": "# Screening: Gathering\n\n## Collection protocol {-}\n\nDetails about the data collection [protocol for participant screening and recruiting](https://www.play-project.org/collection.html#Participant_Recruitment) can be found on the [PLAY Project website](https://play-project.org).\n\n### Setup {-}\n\nWe load functions needed to download KBT screening/demographic questionnaire files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfl <- list.files(file.path(here::here(), \"R\"), \"^kobo_|^file_|^screen_|CONSTANTS\", full.names = TRUE)\npurrr::walk(fl, source)\n\nlibrary(tidyverse) # for the `magrittr` pipe `%>%`\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n## Retrieve from KoBoToolbox (KBT) {-}\n\nWe make use of the `targets` package for downloading data files from KoBoToolbox\nand for saving local XLSX and CSV copies.\nThis allows us to download and process those files on a regular basis.\n\nThis excerpt from `_targets.R` shows two of these 'targets':\n\n```r\n  # Download screening/demographic survey\n  tar_target(\n    kb_screen_df,\n    kobo_list_data_filtered(kb_df, \"[Dd]emographic\"),\n    cue = tarchetypes::tar_cue_age(\n      name = kb_screen,\n      age = as.difftime(update_interval, units = update_interval_units)\n    )\n  ),\n  tar_target(\n    screen_download,\n    screen_download_convert(kb_screen_df, \"data/xlsx/screening\", \"data/csv/screening\"),\n    cue = tarchetypes::tar_cue_age(\n      name = screen_df,\n      age = as.difftime(update_interval, units = update_interval_units)\n    )\n  ),\n```\n\nThe `kb_df` data frame is input to the first target `kb_screen_df`. \n`kb_df` is generated when the following target is generated (by `kobo_list_data()`).\n\n```r\n  tar_target(\n    kb_df,\n    kobo_list_data(),\n    cue = tarchetypes::tar_cue_age(\n      name = kb_df,\n      age = as.difftime(update_interval, units = update_interval_units)\n    )\n  ),\n```\n\n### Download {-}\n\nWe have two targets specified in `_targets.R` that handle the regular downloading of screening data files.\n\nFirst, we generate a data frame of KoBoToolbox forms that contain the screening (\"Demographic\") data.\nHere is the target for that process:\n\n```r\n# Not evaluated\n  tar_target(\n    kb_screen_df,\n    kobo_list_data_filtered(\"[Dd]emographic\"),\n    cue = tarchetypes::tar_cue_age(\n      name = kb_screen,\n      age = as.difftime(update_interval, units = update_interval_units)\n    )\n  ),\n```\n\nThen we download and save the raw XLSX files to `../data/xlsx/screening` using `kobo_retrieve_save_many_xlsx(kb_screen_df, save_dir = \"../data/xlsx/screening\")`.\nFinally, we convert the XLSX files to CSVs via `file_load_xlsx_save_many_csv(\"../data/xlsx/screening\", \"../data/csv/screening\", \"Demographic\")`.\nThe latter two steps are handled by the wrapper function `screen_download_convert(kb_screen_df, \"data/xlsx/screening\", \"data/csv/screening\")`.\nHere is the accompanying target:\n\n```r\n# Download screening/demographic survey\n  tar_target(\n    screen_download,\n    screen_download_convert(kb_screen_df, \"data/xlsx/screening\", \"data/csv/screening\"),\n    cue = tarchetypes::tar_cue_age(\n      name = screen_df,\n      age = as.difftime(update_interval, units = update_interval_units)\n    )\n  ),\n```\n\nWe can confirm that these functions have run properly, as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscreening_fl <- list.files(\"../data/csv/screening/\", pattern = \"*.csv$\")\n```\n:::\n\n\n### Survey questions\n\nThere are *n*=3 screening/demographic data files.\n\nThe KoBoToolbox API enables us to download a table with the questions, as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(kb_screen_df, store=\"../_targets\")\nkb_screen_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      id              id_string                                    title\n1 334134 agChfbnGHc6fiUdfYUaZ2z PLAY Demographic Questionnaire (Spanish)\n2 359546 aGLEqT7eRBhuPgizCQBeqA           PLAY Demographic Questionnaire\n3 275882 anqhvxKtQieo7gc9uPqJ3y           PLAY Demographic Questionnaire\n                               description\n1 PLAY Demographic Questionnaire (Spanish)\n2            New Demographic Questionnaire\n3                 PLAY Phone Questionnaire\n                                            url\n1 https://kc.kobotoolbox.org/api/v1/data/334134\n2 https://kc.kobotoolbox.org/api/v1/data/359546\n3 https://kc.kobotoolbox.org/api/v1/data/275882\n                                                             form_url\n1 https://kf.kobotoolbox.org/api/v2/assets/agChfbnGHc6fiUdfYUaZ2z.xls\n2 https://kf.kobotoolbox.org/api/v2/assets/aGLEqT7eRBhuPgizCQBeqA.xls\n3 https://kf.kobotoolbox.org/api/v2/assets/anqhvxKtQieo7gc9uPqJ3y.xls\n```\n\n\n:::\n:::\n\n\nBased on this information, we know that the questionnaires may be downloaded from the following URLs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste0(\"https://kf.kobotoolbox.org/api/v2/assets/\", kb_screen_df$id_string, \".xls\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://kf.kobotoolbox.org/api/v2/assets/agChfbnGHc6fiUdfYUaZ2z.xls\"\n[2] \"https://kf.kobotoolbox.org/api/v2/assets/aGLEqT7eRBhuPgizCQBeqA.xls\"\n[3] \"https://kf.kobotoolbox.org/api/v2/assets/anqhvxKtQieo7gc9uPqJ3y.xls\"\n```\n\n\n:::\n:::\n\n\nWe import and clean the screening/demographic data in the next section.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}