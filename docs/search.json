[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"","code":""},{"path":"index.html","id":"purpose","chapter":"About","heading":"Purpose","text":"PLAY project researchers use KoBoToolbox collect data participant families.\nData sessions PLAY data collection sites pushed common set files KoBoToolbox server.document describes process ) downloading, ii) parsing, iii) cleaning, iv) exporting files forms suitable data analysis.","code":""},{"path":"index.html","id":"overview-of-data-sets","chapter":"About","heading":"Overview of data sets","text":"two sets data collected using KoBoToolbox.\nOne set collected recruiting screening calls study.\nsecond set collected home visit.","code":""},{"path":"index.html","id":"data-access-and-processing","chapter":"About","heading":"Data access and processing","text":"data downloaded manipulated locally synched GitHub.\naccomplished adding data .gitignore.separate processes detecting deleting personal identifiers specific data files exporting ‘cleaned’ versions may shared Databrary.","code":""},{"path":"index.html","id":"home-visit-data","chapter":"About","heading":"Home visit data","text":"three (3) age groups (12-, 18-, 24-month-olds) four (4) different language environment groups (English-, Spanish-, Bilingual-English-dominant, Bilingual-Spanish-dominant).\nSince language questions specific questions vary age group language environment group, \\(3*4=12\\) different KoBoToolbox survey form files must processed.","code":""},{"path":"setup.html","id":"setup","chapter":"Setup","heading":"Setup","text":"section describes setup procedure.","code":""},{"path":"setup.html","id":"authentication","chapter":"Setup","heading":"Authentication","text":"data stored account https://kf.kobotoolbox.org.\nlogin credentials account shared among PLAY Project staff.\naccess site’s API programmatically, API key downloaded added local ~/.Renviron file.KoBoToolBox API key synched GitHub.","code":""},{"path":"setup.html","id":"set-up","chapter":"Setup","heading":"Set-up","text":"test whether local system API key installed, run command Sys.getenv(\"KOBO_API_KEY\").","code":""},{"path":"setup.html","id":"check-kobo-api-key","chapter":"Setup","heading":"Check KoBo API Key","text":"","code":"\nkb_api <- Sys.getenv(\"KOBO_API_KEY\")\nif ((length(kb_api) != 1) || (!is.character(kb_api))) {\n  stop(\"'KOBO_API_KEY' not installed in .Renviron\")\n} else {\n  message(\"'KOBO_API_KEY' installed.\")\n}## 'KOBO_API_KEY' installed."},{"path":"setup.html","id":"loadsource-helper-functions","chapter":"Setup","heading":"Load/source helper functions","text":"API key installed, several custom functions R/kobo_export.R can run.","code":"\nif (file.exists(\"R/kobo_export.R\")) {\n  source(file.path(\"R/kobo_export.R\"))\n} else {\n  stop(\"File not found: 'R/kobo_export.R'\")\n}"},{"path":"setup.html","id":"install-dependencies","chapter":"Setup","heading":"Install dependencies","text":"helper functions require several external packages. confirm installed, run following chunk.","code":"\nif (params$install_deps) {\n  install_kobo_packages()  \n} else {\n  message(\"'params$install_deps' is FALSE, so no dependencies are installed.\")\n}## 'params$install_deps' is FALSE, so no dependencies are installed."},{"path":"screening-call.html","id":"screening-call","chapter":"Screening call","heading":"Screening call","text":"","code":""},{"path":"screening-call.html","id":"collection-protocol","chapter":"Screening call","heading":"Collection protocol","text":"Details data collection protocol participant screening recruiting can found PLAY Project website.make workflow robust reproducible, much work embedded functions (R/functions.R) extensive use made targets package.\ndocument describes workflow, none code chunks executed.tar_target() syntax read follows: “target” variable file left, function generates right.","code":""},{"path":"screening-call.html","id":"retrieve-files-from-kobotoolbox","chapter":"Screening call","heading":"Retrieve files from KoBoToolbox","text":"relevant KoBoToolbox data files ‘Demographic Questionnaire’ title.\nlist files save data frame called kb_df.","code":"tar_target(kb_df, list_kobo_data())"},{"path":"screening-call.html","id":"save-selected-raw-files-to-local-directory","chapter":"Screening call","heading":"Save selected raw files to local directory","text":"Prepare retrieve demographic data files.\nfiles “Demographic” file name.\ncreate data frame kb_demog includes files.Next, retrieve relevant (XLSX-formatted) files store local directory.","code":"tar_target(kb_demog, dplyr::filter(kb_df, stringr::str_detect(title, \"Demographic\")))tar_target(screening_dir_xlsx, \"protocol/data/xlsx/screening\"),\n  tar_target(screening_downloads, retrieve_screening_xlsx(kb_demog, screening_dir_xlsx)),"},{"path":"screening-call.html","id":"convert-to-csvs","chapter":"Screening call","heading":"Convert to CSVs","text":"default, presume want convert XLSX files screening_dir_xlsx CSVs.strictly necessary, filter downloaded filename ensure includes ‘Demographic_Questionnaire’ form ID, integer.import XLSX files save CSVs","code":"tar_target(screening_dir_csv, \"protocol/data/csv/screening\")\ntar_target(\n  screening_csv_fns,\n  list.files(screening_dir_csv, pattern = \"[0-9]+.*\\\\.csv\", full.names = TRUE)tar_target(screening_xlsx_to_csv, load_screening_xlsx_save_csv(screening_dir_xlsx, screening_dir_csv))"},{"path":"screening-call.html","id":"merge-files","chapter":"Screening call","heading":"Merge files","text":"Next, merge separate screening files.following code documents early exploration files.\nshows field names equivalent.subsequent sub-section, clean field names three files can combined.","code":""},{"path":"screening-call.html","id":"compare-the-files","chapter":"Screening call","heading":"Compare the files","text":"merging, examine fields compare.Open first file.Open second file.Open third file.files different numbers columns, need careful creating merged data file.","code":"\ncsv_fns <- list.files(\"data/csv/screening\", pattern = \"\\\\.csv\", full.names = TRUE)\ndemog_1 <- readr::read_csv(csv_fns[1], show_col_types = FALSE)\ndim(demog_1)\ndemog_2 <- readr::read_csv(csv_fns[2], show_col_types = FALSE)\ndim(demog_2)\ndemog_3 <- readr::read_csv(csv_fns[3], show_col_types = FALSE)\ndim(demog_3)"},{"path":"screening-call.html","id":"extract-column-names","chapter":"Screening call","heading":"Extract column names","text":"Compare 1 2.Compare 1 3.Compare 2 3.second third data files overlap.","code":"\ndemog_1_names <- names(demog_1)\ndemog_2_names <- names(demog_2)\ndemog_3_names <- names(demog_3)\nsum(demog_1_names == demog_2_names)\nsum(demog_1_names == demog_3_names)\nsum(demog_2_names == demog_3_names)"},{"path":"screening-call.html","id":"extract-core-variables","chapter":"Screening call","heading":"Extract core variables","text":"Since data come enrolled participants, careful variables extract project management purposes.use separate functions old (first) file versus later two files.See protocol/R/functions.R focus clean_demog_1() clean_demog_2().scheme inelegant brittle. improved.","code":"\nsource(\"R/functions.R\")\nclean_demog_1## function(csv_fn) {\n##   require(readr)\n##   \n##   stopifnot(\"csv_fn not found\" = file.exists(csv_fn))\n##   \n##   df_1 <- readr::read_csv(csv_fn, show_col_types = FALSE)\n##   df_1 %>%\n##     dplyr::select(., submit_date = c_today, \n##                   site_id = `play_phone_questionnaire/group_siteinfo/site_id`,\n##                   sub_num = `play_phone_questionnaire/group_siteinfo/subject_number`,\n##                   child_age_mos = `play_phone_questionnaire/check_childage`,\n##                   child_sex = `play_phone_questionnaire/child_sex`,\n##                   language_to_child = `play_phone_questionnaire/language_spoken_child`,\n##                   language_spoken_home = `play_phone_questionnaire/language_spoken_home`,\n##                   child_bornonduedate = `play_phone_questionnaire/child_information/child_onterm`,\n##                   child_weight_pounds = `play_phone_questionnaire/child_information/child_weight_pounds`,\n##                   child_weight_ounces = `play_phone_questionnaire/child_information/child_weight_ounces`,\n##                   child_birth_complications = `play_phone_questionnaire/child_information/child_birth_complications`,\n##                   major_illnesses_injuries = `play_phone_questionnaire/child_information/major_illnesses_injuries`,\n##                   child_sleep_time = `play_phone_questionnaire/child_information/child_sleep_time`,\n##                   child_wake_time = `play_phone_questionnaire/child_information/child_wake_time`,\n##                   child_nap_hours = `play_phone_questionnaire/child_information/child_nap_hours`,\n##                   child_sleep_location = `play_phone_questionnaire/child_information/child_sleep_location`,\n##                   mother_childbirth_age = `play_phone_questionnaire/parent_information/mother_information/mother_childbirth_age`,\n##                   mother_race = `play_phone_questionnaire/parent_information/mother_information/mother_race`,\n##                   mother_ethnicity = `play_phone_questionnaire/parent_information/mother_information/mother_ethnicity`,\n##                   ) %>%\n##     dplyr::mutate(\n##       .,\n##       site_id = dplyr::recode(\n##         site_id,\n##         NYU = \"NYUNI\",\n##         new_york_unive = \"NYUNI\",\n##         georgetown_uni = \"GEORG\",\n##         GTN = \"GEORG\",\n##         UCR = \"UCRIV\"\n##       )\n##     ) %>%\n##     dplyr::filter(.,!stringr::str_detect(site_id, '_of__'))\n## }\nclean_demog_2## function(csv_fn) {\n##   require(readr)\n##   require(dplyr)\n##   \n##   stopifnot(\"csv_fn not found\" = file.exists(csv_fn))\n##   \n##   df_2 <- readr::read_csv(csv_fn, show_col_types = FALSE)\n##   df_2 %>%\n##     dplyr::select(submit_date = c_today, \n##                   site_id = `play_demo_questionnaire/group_siteinfo/site_id`,\n##                   sub_num = `play_demo_questionnaire/group_siteinfo/subject_number`,\n##                   child_age_mos = `play_demo_questionnaire/check_childage`,\n##                   child_sex = `play_demo_questionnaire/child_sex`,\n##                   language_to_child = `play_demo_questionnaire/language_spoken_child`,\n##                   language_spoken_home = `play_demo_questionnaire/language_spoken_house`,\n##                   child_bornonduedate = `play_demo_questionnaire/child_information/child_onterm`,\n##                   child_weight_pounds = `play_demo_questionnaire/child_information/child_weight_pounds`,\n##                   child_weight_ounces = `play_demo_questionnaire/child_information/child_weight_ounces`,\n##                   child_birth_complications = `play_demo_questionnaire/child_information/child_birth_complications`,\n##                   major_illnesses_injuries = `play_demo_questionnaire/child_information/major_illnesses_injuries`,\n##                   child_sleep_time = `play_demo_questionnaire/child_information/child_sleep_time`,\n##                   child_wake_time = `play_demo_questionnaire/child_information/child_wake_time`,\n##                   child_nap_hours = `play_demo_questionnaire/child_information/child_nap_hours`,\n##                   child_sleep_location = `play_demo_questionnaire/child_information/child_sleep_location`,\n##                   mother_childbirth_age = `play_demo_questionnaire/group_mominfo/mom_childbirth_age`,\n##                   mother_race = `play_demo_questionnaire/group_mominfo/mom_race`,\n##                   mother_ethnicity = `play_demo_questionnaire/group_mominfo/mom_ethnicity`,\n##     )\n## }"},{"path":"screening-call.html","id":"merge-files-1","chapter":"Screening call","heading":"Merge files","text":"","code":"tar_target(demog_submissions, clean_merge_demog(screening_csv_fns))"},{"path":"home-visit.html","id":"home-visit","chapter":"Home visit","heading":"Home visit","text":"","code":""},{"path":"home-visit.html","id":"protocol","chapter":"Home visit","heading":"Protocol","text":"Details data collection protocol home visit can found [PLAY Project website]((https://www.play-project.org/collection.html#Home_Visit).","code":""},{"path":"home-visit.html","id":"download-data","chapter":"Home visit","heading":"Download data","text":"Data files language age-group conditions stored KoBoToolbox (KBT).List data files KBT.List data forms specific home visit.","code":"\nkb_df <- list_kobo_data()## Loading required package: httr\nif ((dim(kb_df)[1] < 1) || (!is.data.frame(kb_df))) {\n  stop(\"Error in selecting surveys from KoBoToolbox.\")\n}\n# Restrict to surveys collected at home\nkb_home <- kb_df %>%\n  dplyr::filter(., stringr::str_detect(title, \"Home\"))\n\nif ((dim(kb_home)[1] < 1) || (!is.data.frame(kb_home))) {\n  stop(\"Error in selecting home surveys from KoBoToolbox.\")\n}"},{"path":"home-visit.html","id":"save-selected-raw-files-to-local-directory-1","chapter":"Home visit","heading":"Save selected raw files to local directory","text":"Prepare retrieve home visit files.\\(n=\\) 24 home visit data files.\nupdate/download params$home_visit_download TRUE (default).Document-wide parameters set header index.Rmd.often set results = FALSE message = FALSE chunk headers code HTML summaries just . Suppressing results way suppress useful output R console.","code":"\nif (!dir.exists(params$home_visit_dir_xlsx)) {\n  stop(\"Directory not found: '\", params$home_visit_dir_xlsx, \"'\")\n}\nn_files <- dim(kb_home)[1]\n# We _want_ to see the message, but not the results\nif (params$home_visit_download) {\n  purrr::map(\n    1:n_files,\n    retrieve_save_xls_export,\n    kb_df = kb_home,\n    save_dir = params$home_visit_dir_xlsx\n  )\n} else {\n  message(\"'params$home_visit_download' is FALSE. KBT files not downloaded.\")\n}## 'params$home_visit_download' is FALSE. KBT files not downloaded."},{"path":"home-visit.html","id":"normalize-file-names","chapter":"Home visit","heading":"Normalize file names","text":"form names inconsistent, normalize fit following pattern:<form_id>_PLAY_HomeQuestionnaires_<age_group>_<lang_group>.xlsx","code":"\nfl <- list.files(params$home_visit_dir_xlsx, full.names = TRUE)\nfl_home_old <- fl[stringr::str_detect(fl, 'Home')]\nfl_home_new <- purrr::map_chr(fl_home_old, make_standard_form_name)\nfile.rename(fl_home_old, fl_home_new)"},{"path":"home-visit.html","id":"save-xlsx-as-csv","chapter":"Home visit","heading":"Save xlsx as csv","text":"","code":"\nif (!dir.exists(params$home_visit_dir_csv)) {\n  stop(\"Directory not found: '\", params$home_visit_dir_csv, \"'\")\n} else {\n  purrr::map(fl_home_new,\n             open_xlsx_save_csv,\n             params$home_visit_dir_csv,\n             vb = TRUE)\n}"},{"path":"home-visit.html","id":"split-mb-cdi-from-other-questions","chapter":"Home visit","heading":"Split MB-CDI from other questions","text":"Next import CSV given form year, age group, language group, create two new CSV files: one MB-CDI data one survey questions.default, document presumes want convert CSV files meet params$form_years, params$age_grps, params$lang_grps constraints found params$csv_input_dir pairs properly named CSVs save params$csv_save_dir.Extract ‘non-mbcdi’ questions first add ‘non_mbcdi’ filename.Extracting MB-CDI data nearly function call, these_questions parameter set ‘mbcdi’.","code":"\ncsv_fns <- list.files(params$home_visit_dir_csv, '^[0-9]+_raw_[12|18|24]', full.names = TRUE)\n\npurrr::map(\n  csv_fns,\n  open_split_save,\n  csv_save_dir = params$home_visit_dir_csv,\n  these_questions = 'non_mbcdi'\n)\npurrr::map(\n  csv_fns,\n  open_split_save,\n  csv_save_dir = params$home_visit_dir_csv,\n  these_questions = 'mbcdi'\n)"},{"path":"home-visit.html","id":"clean-data","chapter":"Home visit","heading":"Clean data","text":"","code":""},{"path":"home-visit.html","id":"remove-identifiers","chapter":"Home visit","heading":"Remove identifiers","text":"function remove_identifiers() R/kobo_export detects presence names, addresses, phone numbers, email, dates field names input file removes fields.\nalso modifies file name appending _deidentified.non-MBCDI file contains identifiers, target removal process.Note added data .gitignore protocol/, root directory HTML protocol, none data files made available via git GitHub. also means version control done raw data files .","code":"\npurrr::map(\n  csv_fns,\n  open_deidentify_save,\n  csv_save_dir = params$home_visit_dir_csv,\n  these_questions = 'non_mbcdi'\n)"},{"path":"data-dictionary.html","id":"data-dictionary","chapter":"Data dictionary","heading":"Data dictionary","text":"","code":""},{"path":"visualization.html","id":"visualization","chapter":"Visualization","heading":"Visualization","text":"","code":""}]
